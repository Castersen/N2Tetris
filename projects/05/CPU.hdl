// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:

		// Decode
		And16(a=instruction,b[0..15]=true,out=iC,out[15]=iType,out[13..14]=unused,
													out[12]=aBit,out[11]=c1,out[10]=c2,out[9]=c3,out[8]=c4,out[7]=c5,out[6]=c6,
													out[5]=d1,out[4]=d2,out[3]=d3,out[2]=j1,out[1]=j2,out[0]=j3);
		

		// Load & Execute
		Mux16(a=iC,b=outALU,sel=iType,out=muxO);
		Not(in=iType,out=aType);
		Or(a=d1,b=aType,out=ALoad);
		ARegister(in=muxO,load=ALoad,out=arO,out=adressMT,out[0..14]=addressM);

		Mux16(a=arO,b=inM,sel=aBit,out=aOrM);
		Mux(a=false,b=d2,sel=iType,out=dlF);
		DRegister(in=outALU,load=dlF,out=drO);

		ALU(x=drO,y=aOrM,zx=c1,nx=c2,zy=c3,ny=c4,f=c5,no=c6,out=outALU,out=outM,zr=zrC,ng=ngC);

		And(a=d3,b=true,out=writeMT);
		Mux(a=false,b=writeMT,sel=iType,out=writeM);

		// Fetching
		Not(in=zrC,out=nd);
		Not(in=ngC,out=ne);

		And(a=j3,b=nd,out=cd);
		And(a=cd,b=ne,out=o1);

		And(a=j2,b=zrC,out=bd);		
		And(a=bd,b=ne,out=o2);

		And(a=j1,b=nd,out=ad);
		And(a=ad,b=ngC,out=o3);

		And(a=j1,b=j2,out=ab);
		And(a=ab,b=j3,out=o4);

		Or(a=o1,b=o2,out=of1);
		Or(a=o2,b=o3,out=of2);

		Or(a=of1,b=of2,out=sl);

		Mux(a=false,b=sl,sel=iType,out=slF);
		Not(in=slF,out=toInc);
		PC(in=arO,load=slF,inc=toInc,reset=reset,out[0..14]=pc);
}

